#
# SessionCodeTools.R
#
# Copyright (C) 2009-12 by RStudio, Inc.
#
# Unless you have received this program directly from RStudio pursuant
# to the terms of a commercial license agreement with RStudio, then
# this program is licensed to you under the terms of version 3 of the
# GNU Affero General Public License. This program is distributed WITHOUT
# ANY EXPRESS OR IMPLIED WARRANTY, INCLUDING THOSE OF NON-INFRINGEMENT,
# MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE. Please refer to the
# AGPL (http://www.gnu.org/licenses/agpl-3.0.txt) for more details.
#
#

# Return the scope names in which the given names exist
.rs.addFunction("which", function(names) {
   scopes = search()
   sapply(names, function(name) {
      for (scope in scopes) {
         if (exists(name, where=scope, inherits=F))
            return(scope)
      }
      return("")
   })
})

.rs.addFunction("guessToken", function(line, cursorPos)
{
   utils:::.assignLinebuffer(line)
   utils:::.assignEnd(cursorPos)
   utils:::.guessTokenFromLine()
})

.rs.addFunction("findFunctionNamespace", function(name, fromWhere)
{
   if (!identical(fromWhere, ""))
   {
      if ( ! (fromWhere %in% search()) )
         return ("")

      where = as.environment(fromWhere)
   }
   else
   {
      where = globalenv()
   }

   envList <- methods:::findFunction(name, where = where)
   if (length(envList) > 0)
   {
      env <- envList[[1]]
      if (identical(env, baseenv()))
      {
         return ("package:base")
      }
      else if (identical(env, globalenv()))
      {
         return(".GlobalEnv")
      }
      else
      {
         envName = attr(envList[[1]], "name")
         if (!is.null(envName))
            return (envName)
         else
            return ("")
      }
   }
   else
   {
      return ("")
   }
})

.rs.addFunction("getFunction", function(name, namespaceName)
{
   tryCatch(eval(parse(text = name),
                 envir = as.environment(namespaceName),
                 enclos = NULL),
            error = function(e) NULL)
})


.rs.addFunction("functionHasSrcRef", function(func)
{
   return (!is.null(attr(func, "srcref")))
})

.rs.addFunction("deparseFunction", function(func, useSource)
{
   control <- c("keepInteger", "keepNA")
   if (useSource)
     control <- append(control, "useSource")

   deparse(func, width.cutoff = 59, control = control)
})

.rs.addFunction("getS3MethodsForFunction", function(func)
{
  tryCatch(as.character(suppressWarnings(methods(func))),
           error = function(e) character())
})


# Return a list of S4 methods formatted as  functionName {className, className}
# NOTE: should call isGeneric prior to calling this (it will yield an error
# for functions that aren't generic)
.rs.addFunction("getS4MethodsForFunction", function(func)
{
  sigs <- findMethodSignatures(methods = findMethods(func))
  apply(sigs, 
        1, 
        function(sig)
        {
           paste(func, 
                 " {", 
                 paste(sig, collapse=", "),
                 "}",
                 sep="",
                 collapse = "")
        })
})

.rs.addFunction("getS4MethodNamespaceName", function(method)
{
  env <- environment(method)
  if (identical(env, baseenv()))
    return ("package:base")
  else if (identical(env, globalenv()))
    return (".GlobalEnv")
  else
  {
    envName <- environmentName(env)
    if (envName %in% search())
      return (envName)
    else
      paste("package:", envName, sep="")
  }
})

.rs.addFunction("attemptRoxygenTagCompletion", function(line, cursorPos)
{
   line <- substr(line, 0, cursorPos)
   match <- grepl("^\\s*#+'\\s*@[a-zA-Z0-9]*$", line, perl=T)
   if (!match)
      return(NULL)
   
   tag <- sub(".*(?=@)", '', line, perl=T)
   
   # All known Roxygen2 tags, in alphabetical order
   tags <- c(
      "@aliases ",
      "@author ",
      "@concepts ",
      "@describeIn ",
      "@description ",
      "@details ",
      "@docType ",
      "@example ",
      "@examples ",
      "@export",
      "@exportClass ",
      "@exportMethod ",
      "@family ",
      "@field ",
      "@format ",
      "@import ",
      "@importClassesFrom ",
      "@importFrom ",
      "@importMethodsFrom ",
      "@include ",
      "@inheritParams ",
      "@keywords ",
      "@method ",
      "@name ",
      "@note ",
      "@noRd",
      "@param ",
      "@rdname ",
      "@references ",
      "@return ",
      "@S3method ",
      "@section ",
      "@seealso ",
      "@slot ",
      "@source ",
      "@template ",
      "@templateVar ",
      "@title ",
      "@usage ",
      "@useDynLib "
      );
   
   matchingTags <- grep(paste("^", tag, sep=""), tags, value=T)
   
   list(token=tag,
        results=matchingTags,
        packages=vector(mode='character', length=length(matchingTags)),
        fguess=c())
})

.rs.addFunction("getPendingInput", function()
{
   .Call("rs_getPendingInput")
})

utils:::rc.settings(files = TRUE)
.rs.addJsonRpcHandler("get_completions", function(line, cursorPos)
{
   roxygen <- .rs.attemptRoxygenTagCompletion(line, cursorPos)
   if (!is.null(roxygen))
      return(roxygen);
   
   utils:::.assignLinebuffer(line)
   utils:::.assignEnd(cursorPos)
   token = utils:::.guessTokenFromLine()
   utils:::.completeToken()
   results = utils:::.retrieveCompletions()
   status = utils:::rc.status()
   
   packages = sub('^package:', '', .rs.which(results))

   # prefer completions for function arguments
   if (length(results) > 0) {
      n <- nchar(results)
      isFunctionArg <- substring(results, n, n) == "="
      idx <- c(which(isFunctionArg), which(!isFunctionArg))
      results <- results[idx]
      packages <- packages[idx]
   }

   # ensure spaces around =
   results <- sub("=$", " = ", results)

   choose = packages == '.GlobalEnv'
   results.sorted = c(results[choose], results[!choose])
   packages.sorted = c(packages[choose], packages[!choose])
   
   packages.sorted = sub('^\\.GlobalEnv$', '', packages.sorted)
   
   list(token=token, 
        results=results.sorted, 
        packages=packages.sorted, 
        fguess=status$fguess)
})

<<<<<<< Updated upstream
=======
.rs.addFunction("getCompletionsFunction", function(token,
                                                   string,
                                                   discardFirst,
                                                   envir = parent.frame())
{
   if (string == "library" || string == "require")
      return(
         .rs.getInternalRCompletions(
            paste(string, "(", token, sep = ""), FALSE
         )
      )
   
   result <- list(
      results = character(),
      packages = character(),
      fguess = ""
   )
   
   splat <- strsplit(string, ":{2,3}", perl = TRUE)[[1]]
   if (length(splat) == 1)
   {
      object <- .rs.getAnywhere(string, envir = envir)
      if (!is.null(object) && is.function(object))
      {
         formals <- names(formals(object))
         keep <- .rs.startsWith(formals, token)
         formals <- formals[keep]
         
         if (length(formals))
            result$results <- paste(formals, "= ")
         
         result$packages <- rep.int(string, length(formals))
         result$fguess <- string
      }
   }
   else if (length(splat) == 2)
   {
      namespaceString <- splat[[1]]
      functionString <- splat[[2]]
      
      if (namespaceString %in% loadedNamespaces())
      {
         object <- tryCatch(
            expr = {
               get(
                  functionString,
                  envir = asNamespace(namespaceString)
               )
            },
            error = function(e) {
               NULL
            }
         )
         
         if (!is.null(object) && is.function(object))
         {
            formals <- names(formals(object))
            keep <- .rs.startsWith(formals, token)
            formals <- formals[keep]
            
            if (length(formals))
               result$results <- paste(formals, "= ")
            
            result$packages <- rep.int(string, length(formals))
            result$fguess <- functionString
         }
      }
   }
   
   if (discardFirst)
   {
      result$results <- tail(result$results, length(result$results) - 1)
      result$packages <- tail(result$packages, length(result$packages) - 1)
   }
   result
   
})

.rs.addFunction("getCompletionsNamespace", function(token, string, exportsOnly)
{
   if (!(string %in% loadedNamespaces()))
   {
      tryCatch(
         suppressPackageStartupMessages(requireNamespace(string, quietly = TRUE)),
         error = function(e) NULL
      )
   }
   
   if (string %in% loadedNamespaces())
   {
      objects <- if (exportsOnly)
         getNamespaceExports(asNamespace(string))
      else
         objects(asNamespace(string), all.names = TRUE)
      keep <- .rs.startsWith(objects, token)
      completions <- objects[keep]
      
      list(
         token = token,
         results = completions,
         packages = rep.int(string, length(completions)),
         fguess = "",
         excludeContext = .rs.scalar(TRUE)
      )
   }
   else
   {
      list(
         token = token,
         results = character(),
         packages = character(),
         fguess = "",
         excludeContext = .rs.scalar(TRUE)
      )
   }
})

.rs.addFunction("subsetCompletions", function(completions, indices)
{
   completions$results <- completions$results[indices]
   completions$packages <- completions$packages[indices]
   completions
})

.rs.addFunction("appendCompletions", function(old, new)
{
   old$results <- c(old$results, new$results)
   old$packages <- c(old$packages, new$packages)
   if (!is.null(new$fguess))
      old$fguess <- new$fguess
   if (!is.null(new$excludeContext))
      old$excludeContext <- new$excludeContext
   old
})

.rs.addFunction("blackListEvaluationDataTable", function(token, string, envir)
{
   tryCatch({
      parsed <- suppressWarnings(parse(text = string))
      if (is.expression(parsed))
      {
         call <- parsed[[1]][[1]]
         if (as.character(call) == "[")
         {
            objectName <- parsed[[1]][[2]]
            object <- .rs.getAnywhere(objectName, envir = envir)
            if (inherits(object, "data.table"))
            {
               list(
                  token = token,
                  results = names(object),
                  packages = rep.int(
                     paste("[", string, "]", sep = ""), length(object)
                  ),
                  fguess = "",
                  excludeContext = .rs.scalar(TRUE)
               )
            }
         }
      }
      else
      {
         NULL
      }
   }, error = function(e) NULL
   )
   
})

.rs.addFunction("blackListEvaluation", function(token, string, envir)
{
   if (!is.null(result <- .rs.blackListEvaluationDataTable(token, string, envir)))
      return(result)
   
   NULL
   
})

.rs.addFunction("getCompletionsR6Class", function(string)
{
   complete <- .Call("rs_finishedExpression", string)
   parsed <- tryCatch(
      expr = {
         suppressWarnings(parse(text = string))
      },
      error = function(e) NULL
   )
   
   if (is.null(parsed))
      return(NULL)
   
   if (is.expression(parsed))
      parsed <- parsed[[1]]
   
   ## Find the 'public', 'private' methods
   getR6Fields <- function(parsed, field) {
      idx <- which(names(parsed) == field)
      if (length(idx) != 1)
         return(NULL)
      
      object <- parsed[[idx]]
      if (length(object) < 2)
         return(NULL)
      
      result <- vector("list", length(object) - 1)
      names <- names(object)
      for (i in 2:length(object))
         result[[i - 1]] <- list(
            name = names[[i]],
            isFunction = as.character(object[[i]][[1]]) == "function"
         )
      result
   }
   
   publicFields <- getR6Fields(parsed, "public")
   privateFields <- getR6Fields(parsed, "private")
   
   list(
      classname = parsed[[2]],
      public = publicFields,
      private = privateFields
   )
   
})

.rs.addFunction("getCompletionsDollarR6", function(token, string, envir)
{
   tryCatch({
      object <- eval(parse(text = string), envir = envir)
      if (inherits(object, "R6") || inherits(object, "R6ClassGenerator"))
      {
         candidates <- ls(object)
         completions <- candidates[.rs.startsWith(candidates, token)]
         list(token = token,
              results = completions,
              packages = rep.int(
                 string,
                 length(completions)
              ),
              fguess = "",
              excludeContext = .rs.scalar(TRUE))
      }
   },
   error = function(e) NULL
   )
})

.rs.addFunction("getCompletionsDollar", function(token, string, envir)
{
   
   default <- list(token = token,
                   results = character(),
                   packages = character(),
                   fguess = "",
                   excludeContext = .rs.scalar(TRUE))
   
   .rs.withTimeLimit(0.15, fail = default, {
      
      ## Blacklist certain evaluations
      if (!is.null(result <- .rs.blackListEvaluation(token, string, envir)))
         return(result)
      
      ## Get completions for R6 objects
      if (!is.null(result <- .rs.getCompletionsDollarR6(token, string, envir)))
         return(result)
      
      parsed <- suppressWarnings(parse(text = string))
      evaled <- suppressWarnings(eval(parse(text = string), envir = envir))
      if (!is.null(evaled) & !is.null(names(evaled)))
      {
         names <- names(evaled)
         completions <- names[.rs.startsWith(names, token)]
         list(
            token = token,
            results = completions,
            packages = rep.int(
               paste("[", string, "]", sep = ""),
               length(completions)
            ),
            fguess = "",
            excludeContext = .rs.scalar(TRUE)
         )
      }
      else
      {
         default
      }
   })
})

.rs.addFunction("getCompletionsDoubleBracket", function(token,
                                                        string,
                                                        envir = parent.frame())
{
   result <- list(
      token = token,
      results = character(),
      packages = character(),
      fguess = ""
   )
   
   object <- .rs.getAnywhere(string, envir)
   if (!is.null(object) && !is.null(names(object)))
   {
      completions <- names(object)
      completions <- completions[.rs.startsWith(completions, token)]
      result$results <- paste('"', completions, '"', sep = "")
      result$packages <- character(length(completions))
   }
   
   result
   
})

utils:::rc.settings(files = TRUE)
utils:::rc.settings(ipck = TRUE)
.rs.addJsonRpcHandler("get_completions", function(content,
                                                  token,
                                                  string,
                                                  type,
                                                  numCommas,
                                                  chainObjectName,
                                                  additionalArgs,
                                                  excludeArgs)
{
   print(token)
   print(string)
   print(type)
   
   roxygen <- .rs.attemptRoxygenTagCompletion(token)
   if (!is.null(roxygen))
      return(roxygen)
   
   ## Different completion types (sync with RCompletionManager.java)
   TYPE_UNKNOWN <- 0L
   TYPE_FUNCTION <- 1L
   TYPE_SINGLE_BRACKET <- 2L
   TYPE_DOUBLE_BRACKET <- 3L
   TYPE_NAMESPACE_EXPORTED <- 4L
   TYPE_NAMESPACE_ALL <- 5L
   TYPE_DOLLAR <- 6L
   TYPE_FILE <- 7L
   TYPE_CHUNK <- 8L
   
   # Discard the first argument for function completions if we're
   # in a chain
   
   ## TODO: The caller should really pass in whether we want to discard
   ## the first argument.
   discardFirst <-
      string %in% c(
         "mutate", "summarise", "summarize", "rename", "transmute",
         "select", "rename_vars"
      ) &&
      (
         chainObjectName != "" || 
         length(additionalArgs) ||
         length(excludeArgs)
      )
   
   ## If we're completing after a '$' or an '@', then
   ## we don't need any other completions
   if (type == TYPE_DOLLAR)
      return(.rs.getCompletionsDollar(token, string, parent.frame()))
   else if (type %in% c(TYPE_NAMESPACE_EXPORTED, TYPE_NAMESPACE_ALL))
      return(.rs.getCompletionsNamespace(token, string, type == TYPE_NAMESPACE_EXPORTED))
   
   additionalArgs <- unlist(additionalArgs)
   excludeArgs <- unlist(excludeArgs)
   
   ## chainObjectName will be provided if the client detected
   ## that we were performing completions within an e.g. 
   ## `%>%` chain -- use completions from the associated data object.
   objCompletions <- NULL
   if (!is.null(chainObjectName) && chainObjectName != "")
   {
      object <- .rs.getAnywhere(chainObjectName, parent.frame())
      if (length(object))
      {
         nm <- names(object)
         if (length(nm))
         {
            objCompletions <- list(
               results = nm,
               packages = rep.int(
                  paste("[", chainObjectName, "]", sep = ""),
                  length(nm)
               )
            )
         }
      }
   }
   
   result <- .rs.appendCompletions(
      .rs.getInternalRCompletions(token, type == TYPE_FILE),
      if (type == TYPE_FUNCTION)
         .rs.getCompletionsFunction(token, string, discardFirst, parent.frame())
      else if (type == TYPE_SINGLE_BRACKET)
         .rs.getCompletionsSingleBracket(token, string, parent.frame())
      else if (type == TYPE_DOUBLE_BRACKET)
         .rs.getCompletionsDoubleBracket(token, string, parent.frame())
   )
   
   if (is.null(result$fguess))
   {
      result$fguess <- character()
   }
   
   n <- nchar(token)
   result$token <- token
   
   if (!is.null(objCompletions))
   {
      result <- .rs.appendCompletions(
         result,
         .rs.subsetCompletions(
            objCompletions,
            .rs.startsWith(objCompletions$results, token)
         )
      )
   }
   
   if (length(additionalArgs))
   {
      keep <- .rs.startsWith(additionalArgs, token)
      result$results <- c(additionalArgs[keep], result$results)
      result$packages <- c(character(sum(keep)), result$packages)
   }
   
   if (length(excludeArgs))
   {
      keep <- which(!(result$results %in% excludeArgs))
      result$results <- result$results[keep]
      result$packages <- result$packages[keep]
   }
   
   if (is.null(result$excludeContext))
      result$excludeContext <- .rs.scalar(FALSE)
   
   if (is.null(result$dontInsertParens))
      result$dontInsertParens <- .rs.scalar(FALSE)
   
   ## Override param insertion if the function was 'debug' or 'trace'
   ## NOTE: This logic should be synced in 'RCompletionManager.java'.
   functionBlacklist <- c(
      "debug", "debugonce", "undebug", "isdebugged", "library", "require"
   )
   
   if (string %in% functionBlacklist ||
       .rs.endsWith(string, "ply"))
      result$dontInsertParens <- .rs.scalar(TRUE)
   
   result[
      c(
         "token",
         "results", 
         "packages", 
         "fguess", 
         "excludeContext", 
         "dontInsertParens"
      )
   ]
   
})

>>>>>>> Stashed changes
.rs.addJsonRpcHandler("get_help_at_cursor", function(line, cursorPos)
{
   token <- .rs.guessToken(line, cursorPos)
   if (token == '')
      return()

   pieces <- strsplit(token, ':{2,3}')[[1]]

   if (length(pieces) > 1)
      print(help(pieces[2], package=pieces[1], help_type='html'))
   else
      print(help(pieces[1], help_type='html', try.all.packages=T))
})
